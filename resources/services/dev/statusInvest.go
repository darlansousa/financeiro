package main

import (
    "fmt"
    "database/sql"
    "encoding/json"
    "os"
    "io/ioutil"
    "log"
	"net/http"
    _ "github.com/mattn/go-sqlite3"
)

type AutoGenerated struct {
    Prices []struct {
        Price float64 `json:"price"`
        Date  string  `json:"date"`
    } `json:"prices"`
}

type Ativo struct {
    ID   int    `json:"id"`
    ATIVO string `json:"name"`
}

func main() {
    var space = "-------------------------------------------------------------------------------"


    fmt.Println("Status Invest: Checar investimentos")
    
    db, err := sql.Open("sqlite3", "../../financeirodev.db?cache=shared&mode=rwc")

    if err != nil {
        panic(err.Error())
    }

    results, err := db.Query("SELECT ID, ATIVO FROM INV_VARIAVEL WHERE VENDIDO='N'")
    if err != nil {
        panic(err.Error())
    }

    var ativos []Ativo

    for results.Next() {
        var ativo Ativo
       
        err = results.Scan(&ativo.ID, &ativo.ATIVO)
        if err != nil {
            panic(err.Error()) 
        }
        ativos = append(ativos, ativo) 
    }
    defer results.Close()

    for _, ativo := range ativos {
        fmt.Println(space)
        fmt.Println("ID: ",ativo.ID,", Ativo: ",ativo.ATIVO)
        fmt.Println(space)

        var url = "https://statusinvest.com.br/category/tickerprice?ticker="+ativo.ATIVO+"&type=-1"
        fmt.Println("url: ",url)
        fmt.Println(space)
        resp, err := http.Get(url)

        if err != nil {
            log.Fatalln(err)
        }

        defer resp.Body.Close()

        body, err := ioutil.ReadAll(resp.Body)

        if err != nil {
            log.Fatalln(err)
        }

        

        var val AutoGenerated 
        if err := json.Unmarshal([]byte(string(body)), &val); err != nil {
            panic(err)
        }

        var quantidade = len(val.Prices)
        if quantidade > 0 {
            var ultimoIndice = quantidade - 1
            fmt.Println("Pre√ßo: ",val.Prices[ultimoIndice].Price, ", Data: ",val.Prices[ultimoIndice].Date)
            
            tx, _ := db.Begin()

            stmt, _ := tx.Prepare("UPDATE INV_VARIAVEL SET VALOR_UNIDADE_ATUAL=?,DATA_ATUALIZACAO=? WHERE ID = ?")
            _, err := stmt.Exec(
                val.Prices[ultimoIndice].Price,
                val.Prices[ultimoIndice].Date,
                ativo.ID)
            if err != nil {
                panic(err.Error())
            }

            tx.Commit()
            fmt.Println(space)
            fmt.Println("UPDATED")
   
        }else{
            fmt.Println("Nada encontrado.")
        }

        fmt.Println(space)
    }
    os.Exit(0)
}